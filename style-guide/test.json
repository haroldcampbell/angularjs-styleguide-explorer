[
  {
    "url": "singleresponsibility",
    "title": "Single Responsibility",
    "toc_h3": [
      {
        "title": "Rule of 1",
        "toc_h5": [
          {
            "rule_name": "[Style [Y001](#style-y001)]",
            "notes": [
              "Define 1 component per file."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y001](#style-y001)]",
        "notes": [
          "Define 1 component per file."
        ]
      }
    ]
  },
  {
    "url": "iife",
    "title": "IIFE",
    "toc_h3": [
      {
        "title": "JavaScript Closures",
        "toc_h5": [
          {
            "rule_name": "[Style [Y010](#style-y010)]",
            "notes": [
              "Wrap AngularJS components in an Immediately Invoked Function Expression (IIFE).",
              "Note: For brevity only, the rest of the examples in this guide may omit the IIFE syntax.",
              "Note: IIFE's prevent test code from reaching private members like regular expressions or helper functions which are often good to unit test directly on their own. However you can test these through accessible members or by exposing them through their own component. For example placing helper functions, regular expressions or constants in their own factory or constant."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y010](#style-y010)]",
        "notes": [
          "Wrap AngularJS components in an Immediately Invoked Function Expression (IIFE).",
          "Note: For brevity only, the rest of the examples in this guide may omit the IIFE syntax.",
          "Note: IIFE's prevent test code from reaching private members like regular expressions or helper functions which are often good to unit test directly on their own. However you can test these through accessible members or by exposing them through their own component. For example placing helper functions, regular expressions or constants in their own factory or constant."
        ]
      }
    ]
  },
  {
    "url": "modules",
    "title": "Modules",
    "toc_h3": [
      {
        "title": "Avoid Naming Collisions",
        "toc_h5": [
          {
            "rule_name": "[Style [Y020](#style-y020)]",
            "notes": [
              "Use unique naming conventions with separators for sub-modules."
            ]
          }
        ]
      },
      {
        "title": "Definitions (aka Setters)",
        "toc_h5": [
          {
            "rule_name": "[Style [Y021](#style-y021)]",
            "notes": [
              "Declare modules without a variable using the setter syntax."
            ]
          }
        ]
      },
      {
        "title": "Getters",
        "toc_h5": [
          {
            "rule_name": "[Style [Y022](#style-y022)]",
            "notes": [
              "When using a module, avoid using a variable and instead use chaining with the getter syntax."
            ]
          }
        ]
      },
      {
        "title": "Setting vs Getting",
        "toc_h5": [
          {
            "rule_name": "[Style [Y023](#style-y023)]",
            "notes": [
              "Only set once and get for all other instances."
            ]
          }
        ]
      },
      {
        "title": "Named vs Anonymous Functions",
        "toc_h5": [
          {
            "rule_name": "[Style [Y024](#style-y024)]",
            "notes": [
              "Use named functions instead of passing an anonymous function in as a callback."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y020](#style-y020)]",
        "notes": [
          "Use unique naming conventions with separators for sub-modules."
        ]
      },
      {
        "rule_name": "[Style [Y021](#style-y021)]",
        "notes": [
          "Declare modules without a variable using the setter syntax."
        ]
      },
      {
        "rule_name": "[Style [Y022](#style-y022)]",
        "notes": [
          "When using a module, avoid using a variable and instead use chaining with the getter syntax."
        ]
      },
      {
        "rule_name": "[Style [Y023](#style-y023)]",
        "notes": [
          "Only set once and get for all other instances."
        ]
      },
      {
        "rule_name": "[Style [Y024](#style-y024)]",
        "notes": [
          "Use named functions instead of passing an anonymous function in as a callback."
        ]
      }
    ]
  },
  {
    "url": "controllers",
    "title": "Controllers",
    "toc_h3": [
      {
        "title": "controllerAs View Syntax",
        "toc_h5": [
          {
            "rule_name": "[Style [Y030](#style-y030)]",
            "notes": [
              "Use the [`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) syntax over the `classic controller with $scope` syntax."
            ]
          }
        ]
      },
      {
        "title": "controllerAs Controller Syntax",
        "toc_h5": [
          {
            "rule_name": "[Style [Y031](#style-y031)]",
            "notes": [
              "Use the `controllerAs` syntax over the `classic controller with $scope` syntax.",
              "The `controllerAs` syntax uses `this` inside controllers which gets bound to `$scope`"
            ]
          }
        ]
      },
      {
        "title": "controllerAs with vm",
        "toc_h5": [
          {
            "rule_name": "[Style [Y032](#style-y032)]",
            "notes": [
              "Use a capture variable for `this` when using the `controllerAs` syntax. Choose a consistent variable name such as `vm`, which stands for ViewModel."
            ]
          }
        ]
      },
      {
        "title": "Bindable Members Up Top",
        "toc_h5": [
          {
            "rule_name": "[Style [Y033](#style-y033)]",
            "notes": [
              "Place bindable members at the top of the controller, alphabetized, and not spread through the controller code."
            ]
          }
        ]
      },
      {
        "title": "Function Declarations to Hide Implementation Details",
        "toc_h5": [
          {
            "rule_name": "[Style [Y034](#style-y034)]",
            "notes": [
              "Use function declarations to hide implementation details. Keep your bindable members up top. When you need to bind a function in a controller, point it to a function declaration that appears later in the file. This is tied directly to the section Bindable Members Up Top. For more details see [this post](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code)."
            ]
          }
        ]
      },
      {
        "title": "Defer Controller Logic",
        "toc_h5": [
          {
            "rule_name": "[Style [Y035](#style-y035)]",
            "notes": [
              "Defer logic in a controller by delegating to services and factories."
            ]
          }
        ]
      },
      {
        "title": "Keep Controllers Focused",
        "toc_h5": [
          {
            "rule_name": "[Style [Y037](#style-y037)]",
            "notes": [
              "Define a controller for a view, and try not to reuse the controller for other views. Instead, move reusable logic to factories and keep the controller simple and focused on its view."
            ]
          }
        ]
      },
      {
        "title": "Assigning Controllers",
        "toc_h5": [
          {
            "rule_name": "[Style [Y038](#style-y038)]",
            "notes": [
              "When a controller must be paired with a view and either component may be re-used by other controllers or views, define controllers along with their routes."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y030](#style-y030)]",
        "notes": [
          "Use the [`controllerAs`](http://www.johnpapa.net/do-you-like-your-angular-controllers-with-or-without-sugar/) syntax over the `classic controller with $scope` syntax."
        ]
      },
      {
        "rule_name": "[Style [Y031](#style-y031)]",
        "notes": [
          "Use the `controllerAs` syntax over the `classic controller with $scope` syntax.",
          "The `controllerAs` syntax uses `this` inside controllers which gets bound to `$scope`"
        ]
      },
      {
        "rule_name": "[Style [Y032](#style-y032)]",
        "notes": [
          "Use a capture variable for `this` when using the `controllerAs` syntax. Choose a consistent variable name such as `vm`, which stands for ViewModel."
        ]
      },
      {
        "rule_name": "[Style [Y033](#style-y033)]",
        "notes": [
          "Place bindable members at the top of the controller, alphabetized, and not spread through the controller code."
        ]
      },
      {
        "rule_name": "[Style [Y034](#style-y034)]",
        "notes": [
          "Use function declarations to hide implementation details. Keep your bindable members up top. When you need to bind a function in a controller, point it to a function declaration that appears later in the file. This is tied directly to the section Bindable Members Up Top. For more details see [this post](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code)."
        ]
      },
      {
        "rule_name": "[Style [Y035](#style-y035)]",
        "notes": [
          "Defer logic in a controller by delegating to services and factories."
        ]
      },
      {
        "rule_name": "[Style [Y037](#style-y037)]",
        "notes": [
          "Define a controller for a view, and try not to reuse the controller for other views. Instead, move reusable logic to factories and keep the controller simple and focused on its view."
        ]
      },
      {
        "rule_name": "[Style [Y038](#style-y038)]",
        "notes": [
          "When a controller must be paired with a view and either component may be re-used by other controllers or views, define controllers along with their routes."
        ]
      }
    ]
  },
  {
    "url": "services",
    "title": "Services",
    "toc_h3": [
      {
        "title": "Singletons",
        "toc_h5": [
          {
            "rule_name": "[Style [Y040](#style-y040)]",
            "notes": [
              "Services are instantiated with the `new` keyword, use `this` for public methods and variables. Since these are so similar to factories, use a factory instead for consistency."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y040](#style-y040)]",
        "notes": [
          "Services are instantiated with the `new` keyword, use `this` for public methods and variables. Since these are so similar to factories, use a factory instead for consistency."
        ]
      }
    ]
  },
  {
    "url": "factories",
    "title": "Factories",
    "toc_h3": [
      {
        "title": "Single Responsibility",
        "toc_h5": [
          {
            "rule_name": "[Style [Y050](#style-y050)]",
            "notes": [
              "Factories should have a [single responsibility](http://en.wikipedia.org/wiki/Single_responsibility_principle), that is encapsulated by its context. Once a factory begins to exceed that singular purpose, a new factory should be created."
            ]
          }
        ]
      },
      {
        "title": "Singletons",
        "toc_h5": [
          {
            "rule_name": "[Style [Y051](#style-y051)]",
            "notes": [
              "Factories are singletons and return an object that contains the members of the service."
            ]
          }
        ]
      },
      {
        "title": "Accessible Members Up Top",
        "toc_h5": [
          {
            "rule_name": "[Style [Y052](#style-y052)]",
            "notes": [
              "Expose the callable members of the service (it's interface) at the top, using a technique derived from the [Revealing Module Pattern](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript)."
            ]
          }
        ]
      },
      {
        "title": "Function Declarations to Hide Implementation Details",
        "toc_h5": [
          {
            "rule_name": "[Style [Y053](#style-y053)]",
            "notes": [
              "Use function declarations to hide implementation details. Keep your accessible members of the factory up top. Point those to function declarations that appears later in the file. For more details see [this post](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code)."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y050](#style-y050)]",
        "notes": [
          "Factories should have a [single responsibility](http://en.wikipedia.org/wiki/Single_responsibility_principle), that is encapsulated by its context. Once a factory begins to exceed that singular purpose, a new factory should be created."
        ]
      },
      {
        "rule_name": "[Style [Y051](#style-y051)]",
        "notes": [
          "Factories are singletons and return an object that contains the members of the service."
        ]
      },
      {
        "rule_name": "[Style [Y052](#style-y052)]",
        "notes": [
          "Expose the callable members of the service (it's interface) at the top, using a technique derived from the [Revealing Module Pattern](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript)."
        ]
      },
      {
        "rule_name": "[Style [Y053](#style-y053)]",
        "notes": [
          "Use function declarations to hide implementation details. Keep your accessible members of the factory up top. Point those to function declarations that appears later in the file. For more details see [this post](http://www.johnpapa.net/angular-function-declarations-function-expressions-and-readable-code)."
        ]
      }
    ]
  },
  {
    "url": "dataservices",
    "title": "Data Services",
    "toc_h3": [
      {
        "title": "Separate Data Calls",
        "toc_h5": [
          {
            "rule_name": "[Style [Y060](#style-y060)]",
            "notes": [
              "Refactor logic for making data operations and interacting with data to a factory. Make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations."
            ]
          }
        ]
      },
      {
        "title": "Return a Promise from Data Calls",
        "toc_h5": [
          {
            "rule_name": "[Style [Y061](#style-y061)]",
            "notes": [
              "When calling a data service that returns a promise such as $http, return a promise in your calling function too."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y060](#style-y060)]",
        "notes": [
          "Refactor logic for making data operations and interacting with data to a factory. Make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations."
        ]
      },
      {
        "rule_name": "[Style [Y061](#style-y061)]",
        "notes": [
          "When calling a data service that returns a promise such as $http, return a promise in your calling function too."
        ]
      }
    ]
  },
  {
    "url": "directives",
    "title": "Directives",
    "toc_h3": [
      {
        "title": "Limit 1 Per File",
        "toc_h5": [
          {
            "rule_name": "[Style [Y070](#style-y070)]",
            "notes": [
              "Create one directive per file. Name the file for the directive."
            ]
          }
        ]
      },
      {
        "title": "Manipulate DOM in a Directive",
        "toc_h5": [
          {
            "rule_name": "[Style [Y072](#style-y072)]",
            "notes": [
              "When manipulating the DOM directly, use a directive. If alternative ways can be used such as using CSS to set styles or the [animation services](https://docs.angularjs.org/api/ngAnimate), Angular templating, [`ngShow`](https://docs.angularjs.org/api/ng/directive/ngShow) or [`ngHide`](https://docs.angularjs.org/api/ng/directive/ngHide), then use those instead. For example, if the directive simply hides and shows, use ngHide/ngShow."
            ]
          }
        ]
      },
      {
        "title": "Provide a Unique Directive Prefix",
        "toc_h5": [
          {
            "rule_name": "[Style [Y073](#style-y073)]",
            "notes": [
              "Provide a short, unique and descriptive directive prefix such as `acmeSalesCustomerInfo` which is declared in HTML as `acme-sales-customer-info`."
            ]
          }
        ]
      },
      {
        "title": "Restrict to Elements and Attributes",
        "toc_h5": [
          {
            "rule_name": "[Style [Y074](#style-y074)]",
            "notes": [
              "When creating a directive that makes sense as a stand-alone element, allow restrict `E` (custom element) and optionally restrict `A` (custom attribute). Generally, if it could be its own control, `E` is appropriate. General guideline is allow `EA` but lean towards implementing as an element when its stand-alone and as an attribute when it enhances its existing DOM element."
            ]
          }
        ]
      },
      {
        "title": "Directives and ControllerAs",
        "toc_h5": [
          {
            "rule_name": "[Style [Y075](#style-y075)]",
            "notes": [
              "Use `controller as` syntax with a directive to be consistent with using `controller as` with view and controller pairings."
            ]
          },
          {
            "rule_name": "[Style [Y076](#style-y076)]",
            "notes": [
              "Use `bindToController = true` when using `controller as` syntax with a directive when you want to bind the outer scope to the directive's controller's scope."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y070](#style-y070)]",
        "notes": [
          "Create one directive per file. Name the file for the directive."
        ]
      },
      {
        "rule_name": "[Style [Y072](#style-y072)]",
        "notes": [
          "When manipulating the DOM directly, use a directive. If alternative ways can be used such as using CSS to set styles or the [animation services](https://docs.angularjs.org/api/ngAnimate), Angular templating, [`ngShow`](https://docs.angularjs.org/api/ng/directive/ngShow) or [`ngHide`](https://docs.angularjs.org/api/ng/directive/ngHide), then use those instead. For example, if the directive simply hides and shows, use ngHide/ngShow."
        ]
      },
      {
        "rule_name": "[Style [Y073](#style-y073)]",
        "notes": [
          "Provide a short, unique and descriptive directive prefix such as `acmeSalesCustomerInfo` which is declared in HTML as `acme-sales-customer-info`."
        ]
      },
      {
        "rule_name": "[Style [Y074](#style-y074)]",
        "notes": [
          "When creating a directive that makes sense as a stand-alone element, allow restrict `E` (custom element) and optionally restrict `A` (custom attribute). Generally, if it could be its own control, `E` is appropriate. General guideline is allow `EA` but lean towards implementing as an element when its stand-alone and as an attribute when it enhances its existing DOM element."
        ]
      },
      {
        "rule_name": "[Style [Y075](#style-y075)]",
        "notes": [
          "Use `controller as` syntax with a directive to be consistent with using `controller as` with view and controller pairings."
        ]
      },
      {
        "rule_name": "[Style [Y076](#style-y076)]",
        "notes": [
          "Use `bindToController = true` when using `controller as` syntax with a directive when you want to bind the outer scope to the directive's controller's scope."
        ]
      }
    ]
  },
  {
    "url": "resolvingpromisesforacontroller",
    "title": "Resolving Promises for a Controller",
    "toc_h3": [
      {
        "title": "Controller Activation Promises",
        "toc_h5": [
          {
            "rule_name": "[Style [Y080](#style-y080)]",
            "notes": [
              "Resolve start-up logic for a controller in an `activate` function."
            ]
          }
        ]
      },
      {
        "title": "Route Resolve Promises",
        "toc_h5": [
          {
            "rule_name": "[Style [Y081](#style-y081)]",
            "notes": [
              "When a controller depends on a promise to be resolved before the controller is activated, resolve those dependencies in the `$routeProvider` before the controller logic is executed. If you need to conditionally cancel a route before the controller is activated, use a route resolver.",
              "Use a route resolve when you want to decide to cancel the route before ever transitioning to the View."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y080](#style-y080)]",
        "notes": [
          "Resolve start-up logic for a controller in an `activate` function."
        ]
      },
      {
        "rule_name": "[Style [Y081](#style-y081)]",
        "notes": [
          "When a controller depends on a promise to be resolved before the controller is activated, resolve those dependencies in the `$routeProvider` before the controller logic is executed. If you need to conditionally cancel a route before the controller is activated, use a route resolver.",
          "Use a route resolve when you want to decide to cancel the route before ever transitioning to the View."
        ]
      }
    ]
  },
  {
    "url": "manualannotatingfordependencyinjection",
    "title": "Manual Annotating for Dependency Injection",
    "toc_h3": [
      {
        "title": "UnSafe from Minification",
        "toc_h5": [
          {
            "rule_name": "[Style [Y090](#style-y090)]",
            "notes": [
              "Avoid using the shortcut syntax of declaring dependencies without using a minification-safe approach."
            ]
          }
        ]
      },
      {
        "title": "Manually Identify Dependencies",
        "toc_h5": [
          {
            "rule_name": "[Style [Y091](#style-y091)]",
            "notes": [
              "Use `$inject` to manually identify your dependencies for AngularJS components."
            ]
          }
        ]
      },
      {
        "title": "Manually Identify Route Resolver Dependencies",
        "toc_h5": [
          {
            "rule_name": "[Style [Y092](#style-y092)]",
            "notes": [
              "Use $inject to manually identify your route resolver dependencies for AngularJS components."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y090](#style-y090)]",
        "notes": [
          "Avoid using the shortcut syntax of declaring dependencies without using a minification-safe approach."
        ]
      },
      {
        "rule_name": "[Style [Y091](#style-y091)]",
        "notes": [
          "Use `$inject` to manually identify your dependencies for AngularJS components."
        ]
      },
      {
        "rule_name": "[Style [Y092](#style-y092)]",
        "notes": [
          "Use $inject to manually identify your route resolver dependencies for AngularJS components."
        ]
      }
    ]
  },
  {
    "url": "minificationandannotation",
    "title": "Minification and Annotation",
    "toc_h3": [
      {
        "title": "ng-annotate",
        "toc_h5": [
          {
            "rule_name": "[Style [Y100](#style-y100)]",
            "notes": [
              "Use [ng-annotate](//github.com/olov/ng-annotate) for [Gulp](http://gulpjs.com) or [Grunt](http://gruntjs.com) and comment functions that need automated dependency injection using `/** @ngInject */`"
            ]
          }
        ]
      },
      {
        "title": "Use Gulp or Grunt for ng-annotate",
        "toc_h5": [
          {
            "rule_name": "[Style [Y101](#style-y101)]",
            "notes": [
              "Use [gulp-ng-annotate](https://www.npmjs.org/package/gulp-ng-annotate) or [grunt-ng-annotate](https://www.npmjs.org/package/grunt-ng-annotate) in an automated build task. Inject `/* @ngInject */` prior to any function that has dependencies."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y100](#style-y100)]",
        "notes": [
          "Use [ng-annotate](//github.com/olov/ng-annotate) for [Gulp](http://gulpjs.com) or [Grunt](http://gruntjs.com) and comment functions that need automated dependency injection using `/** @ngInject */`"
        ]
      },
      {
        "rule_name": "[Style [Y101](#style-y101)]",
        "notes": [
          "Use [gulp-ng-annotate](https://www.npmjs.org/package/gulp-ng-annotate) or [grunt-ng-annotate](https://www.npmjs.org/package/grunt-ng-annotate) in an automated build task. Inject `/* @ngInject */` prior to any function that has dependencies."
        ]
      }
    ]
  },
  {
    "url": "exceptionhandling",
    "title": "Exception Handling",
    "toc_h3": [
      {
        "title": "decorators",
        "toc_h5": [
          {
            "rule_name": "[Style [Y110](#style-y110)]",
            "notes": [
              "Use a [decorator](https://docs.angularjs.org/api/auto/service/$provide#decorator), at config time using the [`$provide`](https://docs.angularjs.org/api/auto/service/$provide) service, on the [`$exceptionHandler`](https://docs.angularjs.org/api/ng/service/$exceptionHandler) service to perform custom actions when exceptions occur."
            ]
          }
        ]
      },
      {
        "title": "Exception Catchers",
        "toc_h5": [
          {
            "rule_name": "[Style [Y111](#style-y111)]",
            "notes": [
              "Create a factory that exposes an interface to catch and gracefully handle exceptions."
            ]
          }
        ]
      },
      {
        "title": "Route Errors",
        "toc_h5": [
          {
            "rule_name": "[Style [Y112](#style-y112)]",
            "notes": [
              "Handle and log all routing errors using [`$routeChangeError`](https://docs.angularjs.org/api/ngRoute/service/$route#$routeChangeError)."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y110](#style-y110)]",
        "notes": [
          "Use a [decorator](https://docs.angularjs.org/api/auto/service/$provide#decorator), at config time using the [`$provide`](https://docs.angularjs.org/api/auto/service/$provide) service, on the [`$exceptionHandler`](https://docs.angularjs.org/api/ng/service/$exceptionHandler) service to perform custom actions when exceptions occur."
        ]
      },
      {
        "rule_name": "[Style [Y111](#style-y111)]",
        "notes": [
          "Create a factory that exposes an interface to catch and gracefully handle exceptions."
        ]
      },
      {
        "rule_name": "[Style [Y112](#style-y112)]",
        "notes": [
          "Handle and log all routing errors using [`$routeChangeError`](https://docs.angularjs.org/api/ngRoute/service/$route#$routeChangeError)."
        ]
      }
    ]
  },
  {
    "url": "naming",
    "title": "Naming",
    "toc_h3": [
      {
        "title": "Naming Guidelines",
        "toc_h5": [
          {
            "rule_name": "[Style [Y120](#style-y120)]",
            "notes": [
              "Use consistent names for all components following a pattern that describes the component's feature then (optionally) its type. My recommended pattern is `feature.type.js`. There are 2 names for most assets:"
            ]
          }
        ]
      },
      {
        "title": "Feature File Names",
        "toc_h5": [
          {
            "rule_name": "[Style [Y121](#style-y121)]",
            "notes": [
              "Use consistent names for all components following a pattern that describes the component's feature then (optionally) its type. My recommended pattern is `feature.type.js`."
            ]
          }
        ]
      },
      {
        "title": "Test File Names",
        "toc_h5": [
          {
            "rule_name": "[Style [Y122](#style-y122)]",
            "notes": [
              "Name test specifications similar to the component they test with a suffix of `spec`."
            ]
          }
        ]
      },
      {
        "title": "Controller Names",
        "toc_h5": [
          {
            "rule_name": "[Style [Y123](#style-y123)]",
            "notes": [
              "Use consistent names for all controllers named after their feature. Use UpperCamelCase for controllers, as they are constructors."
            ]
          }
        ]
      },
      {
        "title": "Controller Name Suffix",
        "toc_h5": [
          {
            "rule_name": "[Style [Y124](#style-y124)]",
            "notes": [
              "Append the controller name with the suffix `Controller` or with no suffix. Choose 1, not both."
            ]
          }
        ]
      },
      {
        "title": "Factory Names",
        "toc_h5": [
          {
            "rule_name": "[Style [Y125](#style-y125)]",
            "notes": [
              "Use consistent names for all factories named after their feature. Use camel-casing for services and factories."
            ]
          }
        ]
      },
      {
        "title": "Directive Component Names",
        "toc_h5": [
          {
            "rule_name": "[Style [Y126](#style-y126)]",
            "notes": [
              "Use consistent names for all directives using camel-case. Use a short prefix to describe the area that the directives belong (some example are company prefix or project prefix)."
            ]
          }
        ]
      },
      {
        "title": "Modules",
        "toc_h5": [
          {
            "rule_name": "[Style [Y127](#style-y127)]",
            "notes": [
              "When there are multiple modules, the main module file is named `app.module.js` while other dependent modules are named after what they represent. For example, an admin module is named `admin.module.js`. The respective registered module names would be `app` and `admin`."
            ]
          }
        ]
      },
      {
        "title": "Configuration",
        "toc_h5": [
          {
            "rule_name": "[Style [Y128](#style-y128)]",
            "notes": [
              "Separate configuration for a module into its own file named after the module. A configuration file for the main `app` module is named `app.config.js` (or simply `config.js`). A configuration for a module named `admin.module.js` is named `admin.config.js`."
            ]
          }
        ]
      },
      {
        "title": "Routes",
        "toc_h5": [
          {
            "rule_name": "[Style [Y129](#style-y129)]",
            "notes": [
              "Separate route configuration into its own file. Examples might be `app.route.js` for the main module and `admin.route.js` for the `admin` module. Even in smaller apps I prefer this separation from the rest of the configuration."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y120](#style-y120)]",
        "notes": [
          "Use consistent names for all components following a pattern that describes the component's feature then (optionally) its type. My recommended pattern is `feature.type.js`. There are 2 names for most assets:"
        ]
      },
      {
        "rule_name": "[Style [Y121](#style-y121)]",
        "notes": [
          "Use consistent names for all components following a pattern that describes the component's feature then (optionally) its type. My recommended pattern is `feature.type.js`."
        ]
      },
      {
        "rule_name": "[Style [Y122](#style-y122)]",
        "notes": [
          "Name test specifications similar to the component they test with a suffix of `spec`."
        ]
      },
      {
        "rule_name": "[Style [Y123](#style-y123)]",
        "notes": [
          "Use consistent names for all controllers named after their feature. Use UpperCamelCase for controllers, as they are constructors."
        ]
      },
      {
        "rule_name": "[Style [Y124](#style-y124)]",
        "notes": [
          "Append the controller name with the suffix `Controller` or with no suffix. Choose 1, not both."
        ]
      },
      {
        "rule_name": "[Style [Y125](#style-y125)]",
        "notes": [
          "Use consistent names for all factories named after their feature. Use camel-casing for services and factories."
        ]
      },
      {
        "rule_name": "[Style [Y126](#style-y126)]",
        "notes": [
          "Use consistent names for all directives using camel-case. Use a short prefix to describe the area that the directives belong (some example are company prefix or project prefix)."
        ]
      },
      {
        "rule_name": "[Style [Y127](#style-y127)]",
        "notes": [
          "When there are multiple modules, the main module file is named `app.module.js` while other dependent modules are named after what they represent. For example, an admin module is named `admin.module.js`. The respective registered module names would be `app` and `admin`."
        ]
      },
      {
        "rule_name": "[Style [Y128](#style-y128)]",
        "notes": [
          "Separate configuration for a module into its own file named after the module. A configuration file for the main `app` module is named `app.config.js` (or simply `config.js`). A configuration for a module named `admin.module.js` is named `admin.config.js`."
        ]
      },
      {
        "rule_name": "[Style [Y129](#style-y129)]",
        "notes": [
          "Separate route configuration into its own file. Examples might be `app.route.js` for the main module and `admin.route.js` for the `admin` module. Even in smaller apps I prefer this separation from the rest of the configuration."
        ]
      }
    ]
  },
  {
    "url": "applicationstructureliftprinciple",
    "title": "Application Structure LIFT Principle",
    "toc_h3": [
      {
        "title": "LIFT",
        "toc_h5": [
          {
            "rule_name": "[Style [Y140](#style-y140)]",
            "notes": [
              "Structure your app such that you can `L`ocate your code quickly, `I`dentify the code at a glance, keep the `F`lattest structure you can, and `T`ry to stay DRY. The structure should follow these 4 basic guidelines."
            ]
          }
        ]
      },
      {
        "title": "Locate",
        "toc_h5": [
          {
            "rule_name": "[Style [Y141](#style-y141)]",
            "notes": [
              "Make locating your code intuitive, simple and fast."
            ]
          }
        ]
      },
      {
        "title": "Identify",
        "toc_h5": [
          {
            "rule_name": "[Style [Y142](#style-y142)]",
            "notes": [
              "When you look at a file you should instantly know what it contains and represents."
            ]
          }
        ]
      },
      {
        "title": "Flat",
        "toc_h5": [
          {
            "rule_name": "[Style [Y143](#style-y143)]",
            "notes": [
              "Keep a flat folder structure as long as possible. When you get to 7+ files, begin considering separation."
            ]
          }
        ]
      },
      {
        "title": "T-DRY (Try to Stick to DRY)",
        "toc_h5": [
          {
            "rule_name": "[Style [Y144](#style-y144)]",
            "notes": [
              "Be DRY, but don't go nuts and sacrifice readability."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y140](#style-y140)]",
        "notes": [
          "Structure your app such that you can `L`ocate your code quickly, `I`dentify the code at a glance, keep the `F`lattest structure you can, and `T`ry to stay DRY. The structure should follow these 4 basic guidelines."
        ]
      },
      {
        "rule_name": "[Style [Y141](#style-y141)]",
        "notes": [
          "Make locating your code intuitive, simple and fast."
        ]
      },
      {
        "rule_name": "[Style [Y142](#style-y142)]",
        "notes": [
          "When you look at a file you should instantly know what it contains and represents."
        ]
      },
      {
        "rule_name": "[Style [Y143](#style-y143)]",
        "notes": [
          "Keep a flat folder structure as long as possible. When you get to 7+ files, begin considering separation."
        ]
      },
      {
        "rule_name": "[Style [Y144](#style-y144)]",
        "notes": [
          "Be DRY, but don't go nuts and sacrifice readability."
        ]
      }
    ]
  },
  {
    "url": "applicationstructure",
    "title": "Application Structure",
    "toc_h3": [
      {
        "title": "Overall Guidelines",
        "toc_h5": [
          {
            "rule_name": "[Style [Y150](#style-y150)]",
            "notes": [
              "Have a near term view of implementation and a long term vision. In other words, start small and but keep in mind on where the app is heading down the road. All of the app's code goes in a root folder named `app`. All content is 1 feature per file. Each controller, service, module, view is in its own file. All 3rd party vendor scripts are stored in another root folder and not in the `app` folder. I didn't write them and I don't want them cluttering my app (`bower_components`, `scripts`, `lib`)."
            ]
          }
        ]
      },
      {
        "title": "Layout",
        "toc_h5": [
          {
            "rule_name": "[Style [Y151](#style-y151)]",
            "notes": [
              "Place components that define the overall layout of the application in a folder named `layout`. These may include a shell view and controller may act as the container for the app, navigation, menus, content areas, and other regions."
            ]
          }
        ]
      },
      {
        "title": "Folders-by-Feature Structure",
        "toc_h5": [
          {
            "rule_name": "[Style [Y152](#style-y152)]",
            "notes": [
              "Create folders named for the feature they represent. When a folder grows to contain more than 7 files, start to consider creating a folder for them. Your threshold may be different, so adjust as needed."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y150](#style-y150)]",
        "notes": [
          "Have a near term view of implementation and a long term vision. In other words, start small and but keep in mind on where the app is heading down the road. All of the app's code goes in a root folder named `app`. All content is 1 feature per file. Each controller, service, module, view is in its own file. All 3rd party vendor scripts are stored in another root folder and not in the `app` folder. I didn't write them and I don't want them cluttering my app (`bower_components`, `scripts`, `lib`)."
        ]
      },
      {
        "rule_name": "[Style [Y151](#style-y151)]",
        "notes": [
          "Place components that define the overall layout of the application in a folder named `layout`. These may include a shell view and controller may act as the container for the app, navigation, menus, content areas, and other regions."
        ]
      },
      {
        "rule_name": "[Style [Y152](#style-y152)]",
        "notes": [
          "Create folders named for the feature they represent. When a folder grows to contain more than 7 files, start to consider creating a folder for them. Your threshold may be different, so adjust as needed."
        ]
      }
    ]
  },
  {
    "url": "modularity",
    "title": "Modularity",
    "toc_h3": [
      {
        "title": "Many Small, Self Contained Modules",
        "toc_h5": [
          {
            "rule_name": "[Style [Y160](#style-y160)]",
            "notes": [
              "Create small modules that encapsulate one responsibility."
            ]
          }
        ]
      },
      {
        "title": "Create an App Module",
        "toc_h5": [
          {
            "rule_name": "[Style [Y161](#style-y161)]",
            "notes": [
              "Create an application root module whose role is pull together all of the modules and features of your application. Name this for your application."
            ]
          }
        ]
      },
      {
        "title": "Keep the App Module Thin",
        "toc_h5": [
          {
            "rule_name": "[Style [Y162](#style-y162)]",
            "notes": [
              "Only put logic for pulling together the app in the application module. Leave features in their own modules."
            ]
          }
        ]
      },
      {
        "title": "Feature Areas are Modules",
        "toc_h5": [
          {
            "rule_name": "[Style [Y163](#style-y163)]",
            "notes": [
              "Create modules that represent feature areas, such as layout, reusable and shared services, dashboards, and app specific features (e.g. customers, admin, sales)."
            ]
          }
        ]
      },
      {
        "title": "Reusable Blocks are Modules",
        "toc_h5": [
          {
            "rule_name": "[Style [Y164](#style-y164)]",
            "notes": [
              "Create modules that represent reusable application blocks for common services such as exception handling, logging, diagnostics, security, and local data stashing."
            ]
          }
        ]
      },
      {
        "title": "Module Dependencies",
        "toc_h5": [
          {
            "rule_name": "[Style [Y165](#style-y165)]",
            "notes": [
              "The application root module depends on the app specific feature modules and any shared or reusable modules."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y160](#style-y160)]",
        "notes": [
          "Create small modules that encapsulate one responsibility."
        ]
      },
      {
        "rule_name": "[Style [Y161](#style-y161)]",
        "notes": [
          "Create an application root module whose role is pull together all of the modules and features of your application. Name this for your application."
        ]
      },
      {
        "rule_name": "[Style [Y162](#style-y162)]",
        "notes": [
          "Only put logic for pulling together the app in the application module. Leave features in their own modules."
        ]
      },
      {
        "rule_name": "[Style [Y163](#style-y163)]",
        "notes": [
          "Create modules that represent feature areas, such as layout, reusable and shared services, dashboards, and app specific features (e.g. customers, admin, sales)."
        ]
      },
      {
        "rule_name": "[Style [Y164](#style-y164)]",
        "notes": [
          "Create modules that represent reusable application blocks for common services such as exception handling, logging, diagnostics, security, and local data stashing."
        ]
      },
      {
        "rule_name": "[Style [Y165](#style-y165)]",
        "notes": [
          "The application root module depends on the app specific feature modules and any shared or reusable modules."
        ]
      }
    ]
  },
  {
    "url": "startuplogic",
    "title": "Startup Logic",
    "toc_h3": [
      {
        "title": "Configuration",
        "toc_h5": [
          {
            "rule_name": "[Style [Y170](#style-y170)]",
            "notes": [
              "Inject code into [module configuration](https://docs.angularjs.org/guide/module#module-loading-dependencies) that must be configured before running the angular app. Ideal candidates include providers and constants."
            ]
          }
        ]
      },
      {
        "title": "Run Blocks",
        "toc_h5": [
          {
            "rule_name": "[Style [Y171](#style-y171)]",
            "notes": [
              "Any code that needs to run when an application starts should be declared in a factory, exposed via a function, and injected into the [run block](https://docs.angularjs.org/guide/module#module-loading-dependencies)."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y170](#style-y170)]",
        "notes": [
          "Inject code into [module configuration](https://docs.angularjs.org/guide/module#module-loading-dependencies) that must be configured before running the angular app. Ideal candidates include providers and constants."
        ]
      },
      {
        "rule_name": "[Style [Y171](#style-y171)]",
        "notes": [
          "Any code that needs to run when an application starts should be declared in a factory, exposed via a function, and injected into the [run block](https://docs.angularjs.org/guide/module#module-loading-dependencies)."
        ]
      }
    ]
  },
  {
    "url": "angular$wrapperservices",
    "title": "Angular $ Wrapper Services",
    "toc_h3": [
      {
        "title": "$document and $window",
        "toc_h5": [
          {
            "rule_name": "[Style [Y180](#style-y180)]",
            "notes": [
              "Use [`$document`](https://docs.angularjs.org/api/ng/service/$document) and [`$window`](https://docs.angularjs.org/api/ng/service/$window) instead of `document` and `window`."
            ]
          }
        ]
      },
      {
        "title": "$timeout and $interval",
        "toc_h5": [
          {
            "rule_name": "[Style [Y181](#style-y181)]",
            "notes": [
              "Use [`$timeout`](https://docs.angularjs.org/api/ng/service/$timeout) and [`$interval`](https://docs.angularjs.org/api/ng/service/$interval) instead of `setTimeout` and `setInterval` ."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y180](#style-y180)]",
        "notes": [
          "Use [`$document`](https://docs.angularjs.org/api/ng/service/$document) and [`$window`](https://docs.angularjs.org/api/ng/service/$window) instead of `document` and `window`."
        ]
      },
      {
        "rule_name": "[Style [Y181](#style-y181)]",
        "notes": [
          "Use [`$timeout`](https://docs.angularjs.org/api/ng/service/$timeout) and [`$interval`](https://docs.angularjs.org/api/ng/service/$interval) instead of `setTimeout` and `setInterval` ."
        ]
      }
    ]
  },
  {
    "url": "testing",
    "title": "Testing",
    "toc_h3": [
      {
        "title": "Write Tests with Stories",
        "toc_h5": [
          {
            "rule_name": "[Style [Y190](#style-y190)]",
            "notes": [
              "Write a set of tests for every story. Start with an empty test and fill them in as you write the code for the story."
            ]
          }
        ]
      },
      {
        "title": "Testing Library",
        "toc_h5": [
          {
            "rule_name": "[Style [Y191](#style-y191)]",
            "notes": [
              "Use [Jasmine](http://jasmine.github.io/) or [Mocha](http://visionmedia.github.io/mocha/) for unit testing."
            ]
          }
        ]
      },
      {
        "title": "Test Runner",
        "toc_h5": [
          {
            "rule_name": "[Style [Y192](#style-y192)]",
            "notes": [
              "Use [Karma](http://karma-runner.github.io) as a test runner."
            ]
          }
        ]
      },
      {
        "title": "Stubbing and Spying",
        "toc_h5": [
          {
            "rule_name": "[Style [Y193](#style-y193)]",
            "notes": [
              "Use [Sinon](http://sinonjs.org/) for stubbing and spying."
            ]
          }
        ]
      },
      {
        "title": "Headless Browser",
        "toc_h5": [
          {
            "rule_name": "[Style [Y194](#style-y194)]",
            "notes": [
              "Use [PhantomJS](http://phantomjs.org/) to run your tests on a server."
            ]
          }
        ]
      },
      {
        "title": "Code Analysis",
        "toc_h5": [
          {
            "rule_name": "[Style [Y195](#style-y195)]",
            "notes": [
              "Run JSHint on your tests."
            ]
          }
        ]
      },
      {
        "title": "Alleviate Globals for JSHint Rules on Tests",
        "toc_h5": [
          {
            "rule_name": "[Style [Y196](#style-y196)]",
            "notes": [
              "Relax the rules on your test code to allow for common globals such as `describe` and `expect`."
            ]
          }
        ]
      },
      {
        "title": "Organizing Tests",
        "toc_h5": [
          {
            "rule_name": "[Style [Y197](#style-y197)]",
            "notes": [
              "Place unit test files (specs) side-by-side with your client code. Place specs that cover server integration or test multiple components in a separate `tests` folder."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y190](#style-y190)]",
        "notes": [
          "Write a set of tests for every story. Start with an empty test and fill them in as you write the code for the story."
        ]
      },
      {
        "rule_name": "[Style [Y191](#style-y191)]",
        "notes": [
          "Use [Jasmine](http://jasmine.github.io/) or [Mocha](http://visionmedia.github.io/mocha/) for unit testing."
        ]
      },
      {
        "rule_name": "[Style [Y192](#style-y192)]",
        "notes": [
          "Use [Karma](http://karma-runner.github.io) as a test runner."
        ]
      },
      {
        "rule_name": "[Style [Y193](#style-y193)]",
        "notes": [
          "Use [Sinon](http://sinonjs.org/) for stubbing and spying."
        ]
      },
      {
        "rule_name": "[Style [Y194](#style-y194)]",
        "notes": [
          "Use [PhantomJS](http://phantomjs.org/) to run your tests on a server."
        ]
      },
      {
        "rule_name": "[Style [Y195](#style-y195)]",
        "notes": [
          "Run JSHint on your tests."
        ]
      },
      {
        "rule_name": "[Style [Y196](#style-y196)]",
        "notes": [
          "Relax the rules on your test code to allow for common globals such as `describe` and `expect`."
        ]
      },
      {
        "rule_name": "[Style [Y197](#style-y197)]",
        "notes": [
          "Place unit test files (specs) side-by-side with your client code. Place specs that cover server integration or test multiple components in a separate `tests` folder."
        ]
      }
    ]
  },
  {
    "url": "animations",
    "title": "Animations",
    "toc_h3": [
      {
        "title": "Usage",
        "toc_h5": [
          {
            "rule_name": "[Style [Y210](#style-y210)]",
            "notes": [
              "Use subtle [animations with AngularJS](https://docs.angularjs.org/guide/animations) to transition between states for views and primary visual elements. Include the [ngAnimate module](https://docs.angularjs.org/api/ngAnimate). The 3 keys are subtle, smooth, seamless."
            ]
          }
        ]
      },
      {
        "title": "Sub Second",
        "toc_h5": [
          {
            "rule_name": "[Style [Y211](#style-y211)]",
            "notes": [
              "Use short durations for animations. I generally start with 300ms and adjust until appropriate."
            ]
          }
        ]
      },
      {
        "title": "animate.css",
        "toc_h5": [
          {
            "rule_name": "[Style [Y212](#style-y212)]",
            "notes": [
              "Use [animate.css](http://daneden.github.io/animate.css/) for conventional animations."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y210](#style-y210)]",
        "notes": [
          "Use subtle [animations with AngularJS](https://docs.angularjs.org/guide/animations) to transition between states for views and primary visual elements. Include the [ngAnimate module](https://docs.angularjs.org/api/ngAnimate). The 3 keys are subtle, smooth, seamless."
        ]
      },
      {
        "rule_name": "[Style [Y211](#style-y211)]",
        "notes": [
          "Use short durations for animations. I generally start with 300ms and adjust until appropriate."
        ]
      },
      {
        "rule_name": "[Style [Y212](#style-y212)]",
        "notes": [
          "Use [animate.css](http://daneden.github.io/animate.css/) for conventional animations."
        ]
      }
    ]
  },
  {
    "url": "comments",
    "title": "Comments",
    "toc_h3": [
      {
        "title": "jsDoc",
        "toc_h5": [
          {
            "rule_name": "[Style [Y220](#style-y220)]",
            "notes": [
              "If planning to produce documentation, use [`jsDoc`](http://usejsdoc.org/) syntax to document function names, description, params and returns. Use `@namespace` and `@memberOf` to match your app structure."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y220](#style-y220)]",
        "notes": [
          "If planning to produce documentation, use [`jsDoc`](http://usejsdoc.org/) syntax to document function names, description, params and returns. Use `@namespace` and `@memberOf` to match your app structure."
        ]
      }
    ]
  },
  {
    "url": "jshint",
    "title": "JS Hint",
    "toc_h3": [
      {
        "title": "Use an Options File",
        "toc_h5": [
          {
            "rule_name": "[Style [Y230](#style-y230)]",
            "notes": [
              "Use JS Hint for linting your JavaScript and be sure to customize the JS Hint options file and include in source control. See the [JS Hint docs](http://www.jshint.com/docs/) for details on the options."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y230](#style-y230)]",
        "notes": [
          "Use JS Hint for linting your JavaScript and be sure to customize the JS Hint options file and include in source control. See the [JS Hint docs](http://www.jshint.com/docs/) for details on the options."
        ]
      }
    ]
  },
  {
    "url": "constants",
    "title": "Constants",
    "toc_h3": [
      {
        "title": "Vendor Globals",
        "toc_h5": [
          {
            "rule_name": "[Style [Y240](#style-y240)]",
            "notes": [
              "Create an AngularJS Constant for vendor libraries' global variables."
            ]
          },
          {
            "rule_name": "[Style [Y241](#style-y241)]",
            "notes": [
              "Use constants for values that do not change and do not come from another service. When constants are used only for a module that may be reused in multiple applications, place constants in a file per module named after the module. Until this is required, keep constants in the main module in a `constants.js` file."
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y240](#style-y240)]",
        "notes": [
          "Create an AngularJS Constant for vendor libraries' global variables."
        ]
      },
      {
        "rule_name": "[Style [Y241](#style-y241)]",
        "notes": [
          "Use constants for values that do not change and do not come from another service. When constants are used only for a module that may be reused in multiple applications, place constants in a file per module named after the module. Until this is required, keep constants in the main module in a `constants.js` file."
        ]
      }
    ]
  },
  {
    "url": "filetemplatesandsnippets",
    "title": "File Templates and Snippets",
    "toc_h3": [
      {
        "title": "Sublime Text",
        "toc_h5": [
          {
            "rule_name": "[Style [Y250](#style-y250)]",
            "notes": [
              "AngularJS snippets that follow these styles and guidelines."
            ]
          }
        ]
      },
      {
        "title": "Visual Studio",
        "toc_h5": [
          {
            "rule_name": "[Style [Y251](#style-y251)]",
            "notes": [
              "AngularJS file templates that follow these styles and guidelines can be found at [SideWaffle](http://www.sidewaffle.com)"
            ]
          }
        ]
      },
      {
        "title": "WebStorm",
        "toc_h5": [
          {
            "rule_name": "[Style [Y252](#style-y252)]",
            "notes": [
              "AngularJS snippets and file templates that follow these styles and guidelines. You can import them into your WebStorm settings:"
            ]
          }
        ]
      }
    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y250](#style-y250)]",
        "notes": [
          "AngularJS snippets that follow these styles and guidelines."
        ]
      },
      {
        "rule_name": "[Style [Y251](#style-y251)]",
        "notes": [
          "AngularJS file templates that follow these styles and guidelines can be found at [SideWaffle](http://www.sidewaffle.com)"
        ]
      },
      {
        "rule_name": "[Style [Y252](#style-y252)]",
        "notes": [
          "AngularJS snippets and file templates that follow these styles and guidelines. You can import them into your WebStorm settings:"
        ]
      }
    ]
  },
  {
    "url": "yeomangenerator",
    "title": "Yeoman Generator",
    "toc_h3": [

    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y260](#style-y260)]",
        "notes": [

        ]
      }
    ]
  },
  {
    "url": "routing",
    "title": "Routing",
    "toc_h3": [

    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y270](#style-y270)]",
        "notes": [
          "Use the [AngularUI Router](http://angular-ui.github.io/ui-router/) for client-side routing."
        ]
      },
      {
        "rule_name": "[Style [Y271](#style-y271)]",
        "notes": [
          "Define routes for views in the module where they exist. Each module should contain the routes for the views in the module."
        ]
      }
    ]
  },
  {
    "url": "taskautomation",
    "title": "Task Automation",
    "toc_h3": [

    ],
    "toc_h5": [
      {
        "rule_name": "[Style [Y400](#style-y400)]",
        "notes": [
          "Use task automation to list module definition files `*.module.js` before all other application JavaScript files."
        ]
      }
    ]
  },
  {
    "url": "angularjsdocs",
    "title": "AngularJS docs",
    "toc_h3": [

    ],
    "toc_h5": [

    ]
  },
  {
    "url": "contributing",
    "title": "Contributing",
    "toc_h3": [
      {
        "title": "Process",
        "toc_h5": [

        ]
      }
    ],
    "toc_h5": [

    ]
  },
  {
    "url": "license",
    "title": "License",
    "toc_h3": [
      {
        "title": "(The MIT License)",
        "toc_h5": [

        ]
      }
    ],
    "toc_h5": [

    ]
  }
]
